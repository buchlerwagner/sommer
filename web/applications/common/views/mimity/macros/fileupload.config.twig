$('input.files').fileuploader({
    theme: '{{ theme|default('') }}',
    captions: '{{ captions|default('en') }}',
    limit: {{ limit|default('null') }},
    maxSize: {{ maxSize|default('null') }},
    fileMaxSize: {{ fileMaxSize|default('null') }},
    extensions: {{ _json(extensions, true)|raw }},
    disallowedExtensions: {{ _json(disallowedExtensions, true)|raw }},
    changeInput: {{ _empty(changeInput, 'true', true)|raw }},
    enableApi: {{ _bool(enableApi)|default('false') }},
    addMore: {{ _bool(addMore)|default('true') }},
    inputNameBrackets: {{ _bool(inputNameBrackets)|default('false') }},
    {% if theme == 'thumbnails' %}
        {% if actions.edit %}
        editor: true,
        {% endif %}
        thumbnails: {
            box:    '<div class="fileuploader-items">' +
                        '<ul class="fileuploader-items-list">' +
                            '<li class="fileuploader-thumbnails-input no-sort"><div class="fileuploader-thumbnails-input-inner"><i>+</i></div></li>' +
                        '</ul>' +
                    '</div>',
            item:   '<li class="fileuploader-item" data-id="${data.id}">' +
                        '<div class="fileuploader-item-inner">' +
                            //'<div class="type-holder">${extension}</div>' +
                            '<div class="actions-holder">' +
                                {% if actions.view %} '<button type="button" class="fileuploader-action fileuploader-action-popup2" title="${captions.sort}"><i class="fas fa-expand-arrows-alt"></i></button>' +{% endif %}
                                {% if actions.delete %} '<button type="button" class="fileuploader-action fileuploader-action-remove" title="${captions.remove}"><i class="fas fa-trash-alt"></i></button>' +{% endif %}
                            '</div>' +
                            '<div class="thumbnail-holder{% if actions.sort %}  fileuploader-action-sort{% endif %}">' +
                                '${image}' +
                                '<span class="fileuploader-action-popup"></span>' +
                            '</div>' +
                            '<div class="content-holder"><span>${size2}</span></div>' +
                            '<div class="progress-holder">${progressBar}</div>' +
                        '</div>' +
                    '</li>',
            item2:  '<li class="fileuploader-item" data-id="${data.id}">' +
                        '<div class="fileuploader-item-inner">' +
                            //'<div class="type-holder">${extension}</div>' +
                            '<div class="actions-holder">' +
                                {% if actions.download %} '<a href="${file}" class="fileuploader-action fileuploader-action-download" title="${captions.download}" download><i class="fas fa-cloud-download-alt"></i></a>' +{% endif %}
                                {% if actions.view %} '<button type="button" class="fileuploader-action fileuploader-action-popup2" title="${captions.sort}"><i class="fas fa-expand-arrows-alt"></i></button>' +{% endif %}
                                {% if actions.delete %} '<button type="button" class="fileuploader-action fileuploader-action-remove" title="${captions.remove}"><i class="fas fa-trash-alt"></i></button>' +{% endif %}
                            '</div>' +
                            '<div class="thumbnail-holder{% if actions.sort %}  fileuploader-action-sort{% endif %}">' +
                                '${image}' +
                                '<span class="fileuploader-action-popup"></span>' +
                            '</div>' +
                            '<div class="content-holder"><span>${size2}</span></div>' +
                            '<div class="progress-holder">${progressBar}</div>' +
                        '</div>' +
                    '</li>',
            //startImageRenderer: true,
            canvasImage: false,
            _selectors: {
                list: '.fileuploader-items-list',
                item: '.fileuploader-item',
                start: '.fileuploader-action-start',
                {% if actions.sort %}
                sorter: '.fileuploader-action-sort',
                {% endif %}
                retry: '.fileuploader-action-retry',
                popup_open: '.fileuploader-action-popup2',
                remove: '.fileuploader-action-remove'
            },
            onItemShow: function(item, listEl, parentEl, newInputEl, inputEl) {
                var plusInput = listEl.find('.fileuploader-thumbnails-input'),
                api = $.fileuploader.getInstance(inputEl.get(0));

                plusInput.insertAfter(item.html)[api.getOptions().limit && api.getChoosedFiles().length >= api.getOptions().limit ? 'hide' : 'show']();

                if(item.format == 'image') {
                    item.html.find('.fileuploader-item-icon').hide();
                }
            },
            onItemRemove: function(html, listEl, parentEl, newInputEl, inputEl) {
                var plusInput = listEl.find('.fileuploader-thumbnails-input'),
                api = $.fileuploader.getInstance(inputEl.get(0));

                html.children().animate({'opacity': 0}, 200, function() {
                html.remove();

                if (api.getOptions().limit && api.getChoosedFiles().length - 1 < api.getOptions().limit)
                    plusInput.show();
                });
            },
        },
        dragDrop: {
            container: '.fileuploader-thumbnails-input'
        },
        afterRender: function(listEl, parentEl, newInputEl, inputEl) {
            var plusInput = listEl.find('.fileuploader-thumbnails-input'),
            api = $.fileuploader.getInstance(inputEl.get(0));

            plusInput.on('click', function() {
                api.open();
            });

            api.getOptions().dragDrop.container = plusInput;
        },
    {% endif %}
    {% if ajax %}
        startImageRenderer: false,

        upload: {
            url: '{{ ajax.url }}{{ ajax.actions.upload }}/',
            data: null,
            type: '{{ ajax.type|default('POST') }}',
            enctype: 'multipart/form-data',
            start: {{ _bool(ajax.start)|default('true') }},
            synchron: {{ _bool(ajax.synchron)|default('true') }},
            chunk: {{ _bool(ajax.chunk)|default('false') }},
            beforeSend: null,
            onSuccess: function(result, item) {
                var data = {};

                if (result && result.files)
                    data = result;
                else
                    data.hasWarnings = true;

                // if success
                if (data.isSuccess && data.files.length) {
                    item.name = data.files[0].name;
                    //item.html.find('.content-holder > h5').text(item.name).attr('title', item.name);
                }

                // if warnings
                if (data.hasWarnings) {
                    for (var warning in data.warnings) {
                        alert(data.warnings[warning]);
                    }

                    item.html.removeClass('upload-successful').addClass('upload-failed');
                    return this.onError ? this.onError(item) : null;
                }

                setTimeout(function() {
                    item.html.find('.progress-holder').hide();
                    item.renderThumbnail();

                    item.html.find('.fileuploader-action-make-default').attr('data-id', data.files[0].data.id);

                    item.html.find('.fileuploader-action-popup, .fileuploader-item-image').show();
                }, 400);
            },

            onError: function(item) {
                item.html.find('.progress-holder, .fileuploader-action-popup, .fileuploader-item-image').hide();
            },
            onProgress: function(data, item) {
                var progressBar = item.html.find('.progress-holder');

                if(progressBar.length > 0) {
                    progressBar.show();
                    progressBar.find('.fileuploader-progressbar .bar').width(data.percentage + "%");
                }

                item.html.find('.fileuploader-action-popup, .fileuploader-item-image').hide();
            }
        },

        onRemove: function(item) {
            $.post('{{ ajax.url }}{{ ajax.actions.remove }}/', {
                file: item.data.name,
                id: item.data.id,
            });
        },
    {% endif %}

    /*
    dialogs: {
        alert: function(text) {
            return alert(text);
        },
        confirm: function(text, callback) {
            confirm(text) ? callback() : null;
        }
    }
    */

    {% if actions.sort %}
    sorter: {
        selectorExclude: null,
        placeholder: null,
        scrollContainer: window,
        onSort: function(list, listEl, parentEl, newInputEl, inputEl) {
            var api = $.fileuploader.getInstance(inputEl.get(0)),
            fileList = api.getFileList(),
            _list = [];

            $.each(fileList, function(i, item) {
                _list.push({
                    id: item.data.id,
                    index: item.index,
                });
            });

            $.post('{{ ajax.url }}{{ ajax.actions.sort }}/', {
                list: JSON.stringify(_list)
            });
        }
    },
    {% endif %}

    {% if callbacks.onSupportError %}
    {% endif %}
    {% if callbacks.beforeRender %}
    {% endif %}
    {% if callbacks.afterRender %}
    {% endif %}
    {% if callbacks.beforeSelect %}
    {% endif %}
    {% if callbacks.onFilesCheck %}
    {% endif %}
    {% if callbacks.onFileRead %}
    {% endif %}
    {% if callbacks.onSelect %}
    {% endif %}
    {% if callbacks.afterSelect %}
    {% endif %}
    {% if callbacks.onListInput %}
    {% endif %}
    {% if callbacks.onRemove %}
    {% endif %}
    {% if callbacks.onEmpty %}
    {% endif %}
});

$(document).on('click', '.fileuploader-action-make-default', function(){
    var $this = $(this);

    $.ajax({
        url: '{{ ajax.url }}{{ ajax.actions.default }}/?id=' + $this.data('id'),
        success: function(data) {
            $('.fileuploader-action-make-default i').removeClass('fa-check-square').addClass('fa-square');
            $this.find('i').removeClass('fa-square').addClass('fa-check-square');
        }
    });
});

